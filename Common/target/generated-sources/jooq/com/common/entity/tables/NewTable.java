/*
 * This file is generated by jOOQ.
 */
package com.common.entity.tables;


import com.common.entity.AdamProject;
import com.common.entity.Keys;
import com.common.entity.tables.records.NewTableRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NewTable extends TableImpl<NewTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>adam_project.new_table</code>
     */
    public static final NewTable NEW_TABLE = new NewTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NewTableRecord> getRecordType() {
        return NewTableRecord.class;
    }

    /**
     * The column <code>adam_project.new_table.id</code>.
     */
    public static final TableField<NewTableRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), NEW_TABLE, "");

    /**
     * The column <code>adam_project.new_table.test</code>.
     */
    public static final TableField<NewTableRecord, String> TEST = createField(DSL.name("test"), SQLDataType.VARCHAR(45), NEW_TABLE, "");

    private NewTable(Name alias, Table<NewTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private NewTable(Name alias, Table<NewTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * No further instances allowed
     */
    private NewTable() {
        this(DSL.name("new_table"), null);
    }

    public <O extends Record> NewTable(Table<O> child, ForeignKey<O, NewTableRecord> key) {
        super(child, key, NEW_TABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : AdamProject.ADAM_PROJECT;
    }

    @Override
    public UniqueKey<NewTableRecord> getPrimaryKey() {
        return Keys.KEY_NEW_TABLE_PRIMARY;
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
